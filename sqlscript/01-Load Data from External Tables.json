{
	"name": "01-Load Data from External Tables",
	"properties": {
		"folder": {
			"name": "Day 01 - Dedicated Pool"
		},
		"content": {
			"query": "/*\nhttps://learn.microsoft.com/en-us/azure/synapse-analytics/sql-data-warehouse/sql-data-warehouse-load-from-azure-blob-storage-with-polybase\n\nModule2 Demo2 \n\nIn this Demo we use PolyBase and T-SQL commands to load two tables from the Contoso retail data into dedicated SQL pools.\n\nIn this tutorial you will:\n\n-A-  Configure PolyBase to load from Azure blob storage\n-B-  Load public data into your database\n-C-  Perform optimizations after the load is finished.\n*/\n\n--- Create Credential\n--------------------------------\n-- 1 : Create a master key.\n-- Only necessary if one does not already exist.\n-- Required to encrypt the credential secret in the next step.\n\n--CREATE MASTER KEY;\n\n--------------------------------\n-- 2 : Create a database scoped credential\n-- IDENTITY: Provide any string, it is not used for authentication to Azure storage.\n-- SECRET: Provide your Azure storage account key.\n\n/*\nCREATE DATABASE SCOPED CREDENTIAL AzureStorageCredential\nWITH\n    IDENTITY = 'user',\n    SECRET = '<azure_storage_account_key>'\n;\n*/\n\n--------------------------------\n-- 3 : Create an external data source\n-- Use this CREATE EXTERNAL DATA SOURCE command to store the location of the data, and the data type.\n\nCREATE EXTERNAL DATA SOURCE AzureStorage_west_public\nWITH\n(  \n   LOCATION = 'wasbs://contosoretaildw-tables@contosoretaildw.blob.core.windows.net/',\n    TYPE = Hadoop\n);\n\n--------------------------------\n-- 4 : Configure the data format\n--The data is stored in text files in Azure blob storage, and each field is separated with a delimiter. \n--In SSMS, run the following CREATE EXTERNAL FILE FORMAT command to specify the format of the data in the text files. \n--The Contoso data is uncompressed and pipe delimited.\n\nCREATE EXTERNAL FILE FORMAT TextFileFormat\nWITH\n(   FORMAT_TYPE = DELIMITEDTEXT\n,    FORMAT_OPTIONS    (   FIELD_TERMINATOR = '|'\n                    ,    STRING_DELIMITER = ''\n                    ,    DATE_FORMAT         = 'yyyy-MM-dd HH:mm:ss.fff'\n                    ,    USE_TYPE_DEFAULT = FALSE\n                    )\n);\n\n--------------------------------\n--5 : Create the schema for the external tables\nCREATE SCHEMA [asb]\nGO\n\n--------------------------------\n--6 : Create the external tables\n--create the DimProduct and FactOnlineSales external tables. All you're doing here is defining column names and data types, \n--and binding them to the location and format of the Azure blob storage files.\n\n--DimProduct\nDROP EXTERNAL TABLE [asb].[DimProduct];\n\nCREATE EXTERNAL TABLE [asb].DimProduct (\n    [ProductKey] [int] NOT NULL,\n    [ProductLabel] [nvarchar](255) NULL,\n    [ProductName] [nvarchar](500) NULL,\n    [ProductDescription] [nvarchar](400) NULL,\n    [ProductSubcategoryKey] [int] NULL,\n    [Manufacturer] [nvarchar](50) NULL,\n    [BrandName] [nvarchar](50) NULL,\n    [ClassID] [nvarchar](10) NULL,\n    [ClassName] [nvarchar](20) NULL,\n    [StyleID] [nvarchar](10) NULL,\n    [StyleName] [nvarchar](20) NULL,\n    [ColorID] [nvarchar](10) NULL,\n    [ColorName] [nvarchar](20) NOT NULL,\n    [Size] [nvarchar](50) NULL,\n    [SizeRange] [nvarchar](50) NULL,\n    [SizeUnitMeasureID] [nvarchar](20) NULL,\n    [Weight] [float] NULL,\n    [WeightUnitMeasureID] [nvarchar](20) NULL,\n    [UnitOfMeasureID] [nvarchar](10) NULL,\n    [UnitOfMeasureName] [nvarchar](40) NULL,\n    [StockTypeID] [nvarchar](10) NULL,\n    [StockTypeName] [nvarchar](40) NULL,\n    [UnitCost] [money] NULL,\n    [UnitPrice] [money] NULL,\n    [AvailableForSaleDate] [datetime] NULL,\n    [StopSaleDate] [datetime] NULL,\n    [Status] [nvarchar](7) NULL,\n    [ImageURL] [nvarchar](150) NULL,\n    [ProductURL] [nvarchar](150) NULL,\n    [ETLLoadID] [int] NULL,\n    [LoadDate] [datetime] NULL,\n    [UpdateDate] [datetime] NULL\n)\nWITH\n(\n    LOCATION='/DimProduct/'\n,   DATA_SOURCE = AzureStorage_west_public\n,   FILE_FORMAT = TextFileFormat\n,   REJECT_TYPE = VALUE\n,   REJECT_VALUE = 0\n)\n;\n\n--FactOnlineSales\nDROP EXTERNAL TABLE asb.FactOnlineSales;\nCREATE EXTERNAL TABLE [asb].FactOnlineSales\n(\n    [OnlineSalesKey] [int]  NOT NULL,\n    [DateKey] [datetime] NOT NULL,\n    [StoreKey] [int] NOT NULL,\n    [ProductKey] [int] NOT NULL,\n    [PromotionKey] [int] NOT NULL,\n    [CurrencyKey] [int] NOT NULL,\n    [CustomerKey] [int] NOT NULL,\n    [SalesOrderNumber] [nvarchar](20) NOT NULL,\n    [SalesOrderLineNumber] [int] NULL,\n    [SalesQuantity] [int] NOT NULL,\n    [SalesAmount] [money] NOT NULL,\n    [ReturnQuantity] [int] NOT NULL,\n    [ReturnAmount] [money] NULL,\n    [DiscountQuantity] [int] NULL,\n    [DiscountAmount] [money] NULL,\n    [TotalCost] [money] NOT NULL,\n    [UnitCost] [money] NULL,\n    [UnitPrice] [money] NULL,\n    [ETLLoadID] [int] NULL,\n    [LoadDate] [datetime] NULL,\n    [UpdateDate] [datetime] NULL\n)\nWITH\n(\n    LOCATION='/FactOnlineSales/'\n,   DATA_SOURCE = AzureStorage_west_public\n,   FILE_FORMAT = TextFileFormat\n,   REJECT_TYPE = VALUE\n,   REJECT_VALUE = 0\n)\n;\n\n----- Load the data -----\n\n--------------------------------\n-- 7 : Create a new schema\n  CREATE SCHEMA [cso]\nGO\n\n--------------------------------\n--8 :  Load the data into new tables\n--To load data from Azure blob storage into the data warehouse table, use the CREATE TABLE AS SELECT (Transact-SQL) statement. \n--Loading with CTAS leverages the strongly typed external tables you've created. To load the data into new tables, use one CTAS statement per table.\n\nSELECT GETDATE();\nGO\n\nDROP TABLE cso.DimProduct;\nCREATE TABLE [cso].[DimProduct]            \nWITH (DISTRIBUTION = HASH([ProductKey]  ) ) AS SELECT * FROM [asb].[DimProduct]             \nOPTION (LABEL = 'CTAS : Load [cso].[DimProduct]             ');\n\n\nDROP TABLE cso.FactOnlineSales;\nCREATE TABLE [cso].[FactOnlineSales]      \nWITH (DISTRIBUTION = HASH([ProductKey]  ) ) AS SELECT * FROM [asb].[FactOnlineSales]        \nOPTION (LABEL = 'CTAS : Load [cso].[FactOnlineSales]        ');\n\n--------------------------------\n-- 9 : Track the load progress \n--- Open new Query windows and run follwoing command\n\n-- To see all requests\nSELECT * FROM sys.dm_pdw_exec_requests;\n\n-- To see a particular request identified by its label\nSELECT * FROM sys.dm_pdw_exec_requests as r\nWHERE r.[label] = 'CTAS : Load [cso].[DimProduct]             '\n      OR r.[label] = 'CTAS : Load [cso].[FactOnlineSales]        '\n;\n\n\n-- To track bytes and files\nSELECT\n    r.command,\n    s.request_id,\n    r.status,\n    count(distinct input_name) as nbr_files,\n    sum(s.bytes_processed)/1024/1024/1024 as gb_processed\nFROM\n    sys.dm_pdw_exec_requests r\n    inner join sys.dm_pdw_dms_external_work s\n        on r.request_id = s.request_id\nWHERE\n    r.[label] = 'CTAS : Load [cso].[DimProduct]             '\n    OR r.[label] = 'CTAS : Load [cso].[FactOnlineSales]        '\nGROUP BY\n    r.command,\n    s.request_id,\n    r.status\nORDER BY\n    nbr_files desc,\n    gb_processed desc;\n\n\n--------------------------------\n-- 10 : Optimize columnstore compression\n--By default, dedicated SQL pools store the table as a clustered columnstore index. After a load completes, some of the data rows might not be compressed into the columnstore. \n--There are different reasons why this can happen. To learn more, see manage columnstore indexes.\n--To optimize query performance and columnstore compression after a load, rebuild the table to force the columnstore index to compress all the rows.\n\nSELECT GETDATE();\nGO\n\nALTER INDEX ALL ON [cso].[DimProduct]               REBUILD;\nALTER INDEX ALL ON [cso].[FactOnlineSales]          REBUILD;\n\n--------------------------------\n-- 11 : Optimize statistics\n--It's best to create single-column statistics immediately after a load. If you know certain columns aren't going to be in query predicates, \n--you can skip creating statistics on those columns. If you create single-column statistics on every column, it might take a long time to rebuild all the statistics.\nCREATE STATISTICS [stat_cso_DimProduct_AvailableForSaleDate] ON [cso].[DimProduct]([AvailableForSaleDate]);\nCREATE STATISTICS [stat_cso_DimProduct_BrandName] ON [cso].[DimProduct]([BrandName]);\nCREATE STATISTICS [stat_cso_DimProduct_ClassID] ON [cso].[DimProduct]([ClassID]);\nCREATE STATISTICS [stat_cso_DimProduct_ClassName] ON [cso].[DimProduct]([ClassName]);\nCREATE STATISTICS [stat_cso_DimProduct_ColorID] ON [cso].[DimProduct]([ColorID]);\nCREATE STATISTICS [stat_cso_DimProduct_ColorName] ON [cso].[DimProduct]([ColorName]);\nCREATE STATISTICS [stat_cso_DimProduct_ETLLoadID] ON [cso].[DimProduct]([ETLLoadID]);\nCREATE STATISTICS [stat_cso_DimProduct_ImageURL] ON [cso].[DimProduct]([ImageURL]);\nCREATE STATISTICS [stat_cso_DimProduct_LoadDate] ON [cso].[DimProduct]([LoadDate]);\nCREATE STATISTICS [stat_cso_DimProduct_Manufacturer] ON [cso].[DimProduct]([Manufacturer]);\nCREATE STATISTICS [stat_cso_DimProduct_ProductDescription] ON [cso].[DimProduct]([ProductDescription]);\nCREATE STATISTICS [stat_cso_DimProduct_ProductKey] ON [cso].[DimProduct]([ProductKey]);\nCREATE STATISTICS [stat_cso_DimProduct_ProductLabel] ON [cso].[DimProduct]([ProductLabel]);\nCREATE STATISTICS [stat_cso_DimProduct_ProductName] ON [cso].[DimProduct]([ProductName]);\nCREATE STATISTICS [stat_cso_DimProduct_ProductSubcategoryKey] ON [cso].[DimProduct]([ProductSubcategoryKey]);\nCREATE STATISTICS [stat_cso_DimProduct_ProductURL] ON [cso].[DimProduct]([ProductURL]);\nCREATE STATISTICS [stat_cso_DimProduct_Size] ON [cso].[DimProduct]([Size]);\nCREATE STATISTICS [stat_cso_DimProduct_SizeRange] ON [cso].[DimProduct]([SizeRange]);\nCREATE STATISTICS [stat_cso_DimProduct_SizeUnitMeasureID] ON [cso].[DimProduct]([SizeUnitMeasureID]);\nCREATE STATISTICS [stat_cso_DimProduct_Status] ON [cso].[DimProduct]([Status]);\nCREATE STATISTICS [stat_cso_DimProduct_StockTypeID] ON [cso].[DimProduct]([StockTypeID]);\nCREATE STATISTICS [stat_cso_DimProduct_StockTypeName] ON [cso].[DimProduct]([StockTypeName]);\nCREATE STATISTICS [stat_cso_DimProduct_StopSaleDate] ON [cso].[DimProduct]([StopSaleDate]);\nCREATE STATISTICS [stat_cso_DimProduct_StyleID] ON [cso].[DimProduct]([StyleID]);\nCREATE STATISTICS [stat_cso_DimProduct_StyleName] ON [cso].[DimProduct]([StyleName]);\nCREATE STATISTICS [stat_cso_DimProduct_UnitCost] ON [cso].[DimProduct]([UnitCost]);\nCREATE STATISTICS [stat_cso_DimProduct_UnitOfMeasureID] ON [cso].[DimProduct]([UnitOfMeasureID]);\nCREATE STATISTICS [stat_cso_DimProduct_UnitOfMeasureName] ON [cso].[DimProduct]([UnitOfMeasureName]);\nCREATE STATISTICS [stat_cso_DimProduct_UnitPrice] ON [cso].[DimProduct]([UnitPrice]);\nCREATE STATISTICS [stat_cso_DimProduct_UpdateDate] ON [cso].[DimProduct]([UpdateDate]);\nCREATE STATISTICS [stat_cso_DimProduct_Weight] ON [cso].[DimProduct]([Weight]);\nCREATE STATISTICS [stat_cso_DimProduct_WeightUnitMeasureID] ON [cso].[DimProduct]([WeightUnitMeasureID]);\nCREATE STATISTICS [stat_cso_FactOnlineSales_CurrencyKey] ON [cso].[FactOnlineSales]([CurrencyKey]);\nCREATE STATISTICS [stat_cso_FactOnlineSales_CustomerKey] ON [cso].[FactOnlineSales]([CustomerKey]);\nCREATE STATISTICS [stat_cso_FactOnlineSales_DateKey] ON [cso].[FactOnlineSales]([DateKey]);\nCREATE STATISTICS [stat_cso_FactOnlineSales_OnlineSalesKey] ON [cso].[FactOnlineSales]([OnlineSalesKey]);\nCREATE STATISTICS [stat_cso_FactOnlineSales_ProductKey] ON [cso].[FactOnlineSales]([ProductKey]);\nCREATE STATISTICS [stat_cso_FactOnlineSales_PromotionKey] ON [cso].[FactOnlineSales]([PromotionKey]);\nCREATE STATISTICS [stat_cso_FactOnlineSales_StoreKey] ON [cso].[FactOnlineSales]([StoreKey]);\n\n----------------------------\n-- 12: start querying the tables to explore your data.\nSELECT  SUM(f.[SalesAmount]) AS [sales_by_brand_amount]\n,       p.[BrandName]\nFROM    [cso].[FactOnlineSales] AS f\nJOIN    [cso].[DimProduct]      AS p ON f.[ProductKey] = p.[ProductKey]\nGROUP BY p.[BrandName]",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "sqlu3qtrzl",
				"poolName": "sqlu3qtrzl"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}