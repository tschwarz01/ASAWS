{
	"name": "07_Bronze_Silver_Gold_Table",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4d2fdae8-c48d-4bb0-be50-9e64c3858e04"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f4b71bff-7f98-47a7-ba03-f48b5c093a7f/resourceGroups/dp500-u3qtrzl/providers/Microsoft.Synapse/workspaces/synapseu3qtrzl/bigDataPools/synspark",
				"name": "synspark",
				"type": "Spark",
				"endpoint": "https://synapseu3qtrzl.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"<p>\r\n",
					"In this use case we are storing transaction details of a particular store.\r\n",
					"Daily transaction details are uploaded by the store. Transaction_id would be a primary key.\r\n",
					"If a transaction_id doesn't exist in delta table (silver area), it implies the transactions are the latest and it needs to be inserted. If the csv file contains existing transaction_id, it implies it is an update to existing transaction\r\n",
					"</p>\r\n",
					"Bronze area is based on csv files and is on append only mode. <br>\r\n",
					"Silver area will contain processed data about the current version of the transactions<br>\r\n",
					"Gold area will have aggregated insights which can be consumed by reports<br>\r\n",
					"\r\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Defining the bronze area. <br>\r\n",
					"create a folder transactions and Upload TransDtls-1.csv to /mnt/datasets/transactions folder <br>\r\n",
					"View will read all the csv files in the folder <br>"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW transaction_bronze_csv\r\n",
					"USING CSV\r\n",
					"OPTIONS (path \"/mnt/datasets/transactions/*.csv\", header \"true\", mode \"FAILFAST\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Define Silver table which contain processed data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE DATABASE IF NOT EXISTS DataLoad;\r\n",
					"CREATE TABLE IF NOT EXISTS DataLoad.transaction_silver(transaction_id int, \r\n",
					"order_id int, \r\n",
					"Order_dt Date,\r\n",
					"customer_id varchar(100),\r\n",
					"product_id varchar(100),\r\n",
					"quantity int,\r\n",
					"cost int\r\n",
					")\r\n",
					"USING DELTA\r\n",
					"Location \"/mnt/deltalake/transaction_silver\"\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Define a view to extract the latest version of each transaction id"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW transaction_bronze_latest\r\n",
					"AS\r\n",
					"Select x.transaction_id,\r\n",
					"x.order_id,\r\n",
					"x.Order_dt,\r\n",
					"x.customer_id,\r\n",
					"x.product_id,\r\n",
					"x.quantity,\r\n",
					"x.cost FROM (\r\n",
					"Select \r\n",
					"* ,\r\n",
					"rank() over (partition by transaction_id order by load_date desc) as rank\r\n",
					"From transaction_bronze_csv ) x\r\n",
					"WHERE x.rank = 1\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"select * from transaction_bronze_latest"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Perform upsert by comparing bronze with silver table using transaction id column <br>\r\n",
					"If the transaction id already exists in silver, all columns are updated based on the latest version from bronze <br>\r\n",
					"If it doesn't it is inserted <br>\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"Merge into DataLoad.transaction_silver source\r\n",
					"Using transaction_bronze_latest target \r\n",
					"on source.transaction_id = target.transaction_id\r\n",
					"WHEN MATCHED THEN UPDATE SET *\r\n",
					"WHEN NOT MATCHED \r\n",
					"THEN INSERT *\r\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"select * from DataLoad.transaction_silver "
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Gold table contains key insights aggregated at daily level, per product, per customer <br>\r\n",
					"Reporting applications can leverage gold table obtain greater insights effeciently"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TABLE DataLoad.transaction_gold\r\n",
					"USING DELTA\r\n",
					"Location \"/mnt/deltalake/transaction_gold\"\r\n",
					"AS \r\n",
					"\r\n",
					"Select\r\n",
					"Avg(cost) as avg_daily_cost,\r\n",
					"sum(cost) as sum_daily_cost,\r\n",
					"sum(quantity) as total_daily_quantity,\r\n",
					"avg(quantity) as avg_daily_quantity,\r\n",
					"count(distinct order_id) as order_count,\r\n",
					"count(distinct transaction_id) as transaction_count,\r\n",
					"product_id,\r\n",
					"customer_id,\r\n",
					"Order_dt\r\n",
					"From \r\n",
					"DataLoad.transaction_silver\r\n",
					"Group by \r\n",
					"product_id,\r\n",
					"customer_id,\r\n",
					"Order_dt\r\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"Select * from DataLoad.transaction_gold"
				],
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"```\r\n",
					"Optional: <br>\r\n",
					"You may repeat the notebook by uploading additional csv file (TransDtls-2.csv) which will contain additional transactions which would cause few updates and inserts\r\n",
					"```"
				]
			}
		]
	}
}